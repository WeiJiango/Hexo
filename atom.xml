<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WeiJiang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wliwu.com/"/>
  <updated>2019-01-17T14:42:23.231Z</updated>
  <id>http://www.wliwu.com/</id>
  
  <author>
    <name>WeiJiang199667</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java基础—动态代理[转载]</title>
    <link href="http://www.wliwu.com/2019/01/17/java%E5%9F%BA%E7%A1%80%E2%80%94%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://www.wliwu.com/2019/01/17/java基础—动态代理/</id>
    <published>2019-01-17T14:12:44.000Z</published>
    <updated>2019-01-17T14:42:23.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载地址https-blog-csdn-net-ShuSheng0007-article-details-80864854"><a href="#转载地址https-blog-csdn-net-ShuSheng0007-article-details-80864854" class="headerlink" title="转载地址https://blog.csdn.net/ShuSheng0007/article/details/80864854"></a>转载地址<a href="https://blog.csdn.net/ShuSheng0007/article/details/80864854" target="_blank" rel="noopener">https://blog.csdn.net/ShuSheng0007/article/details/80864854</a></h2><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>什么是代理模式？解决什么问题（即为什么需要）？什么是静态代理？什么是动态代理模式？二者什么关系？具体如何实现？什么原理？如何改进？这即为我们学习一项新知识的正确打开方式，我们接下来会以此展开，让你秒懂。<br>概念</p><h3 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h3><pre><code>定义：为其他对象提供一种代理以控制对这个对象的访问</code></pre><p>定义总是抽象而晦涩难懂的，让我们回到生活中来吧。</p><p>实例：王二狗公司（天津在线回声科技发展有限公司）老板突然在发工资的前一天带着小姨子跑路了，可怜二狗一身房贷，被迫提起劳动仲裁，劳动局就会为其指派一位代理律师全权负责二狗的仲裁事宜。那这里面就是使用了代理模式，因为在劳动仲裁这个活动中，代理律师会全权代理王二狗。<br>解决什么问题</p><p>下面是一些使用场景，不过太抽象，暂时可以不要在意，随着你的不断进步你终究会明白的。</p><pre><code>远程代理 ：为位于两个不同地址空间对象的访问提供了一种实现机制，可以将一些消耗资源较多的对象和操作移至性能更好的计算机上，提高系统的整体运行效率。虚拟代理：通过一个消耗资源较少的对象来代表一个消耗资源较多的对象，可以在一定程度上节省系统的运行开销。缓冲代理：为某一个操作的结果提供临时的缓存存储空间，以便在后续使用中能够共享这些结果，优化系统性能，缩短执行时间。保护代理：可以控制对一个对象的访问权限，为不同用户提供不同级别的使用权限。智能引用：要为一个对象的访问（引用）提供一些额外的操作时可以使用</code></pre><h3 id="什么是静态代理"><a href="#什么是静态代理" class="headerlink" title="什么是静态代理"></a>什么是静态代理</h3><p>静态代理是指预先确定了代理与被代理者的关系，例如王二狗的代理律师方文镜是在开庭前就确定的了。那映射到编程领域的话，就是指代理类与被代理类的依赖关系在编译期间就确定了。下面就是王二狗劳动仲裁的代码实现：</p><p>首先定义一个代表诉讼的接口<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILawSuit</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">submit</span>(<span class="params">String proof</span>)</span>;<span class="comment">//提起诉讼</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defend</span>(<span class="params"></span>)</span>;<span class="comment">//法庭辩护</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>王二狗诉讼类型，实现ILawSuit接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondDogWang</span> <span class="keyword">implements</span> <span class="title">ILawSuit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(String proof)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"老板欠薪跑路，证据如下：%s"</span>,proof));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"铁证如山，%s还钱"</span>,<span class="string">"马旭"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理律师诉讼类，实现ILawSuit接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyLawyer</span> <span class="keyword">implements</span> <span class="title">ILawSuit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ILawSuit plaintiff;<span class="comment">//持有要代理的那个对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyLawyer</span><span class="params">(ILawSuit plaintiff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.plaintiff=plaintiff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(String proof)</span> </span>&#123;</span><br><span class="line">        plaintiff.submit(proof);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        plaintiff.defend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>产生代理对象的静态代理工厂类<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ILawSuit getProxy()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ProxyLawyer</span>(<span class="keyword">new</span> <span class="type">SecondDogWang</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就基本构建了静态代理关系了，然后在客户端就可以使用代理对象来进行操作了。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">    <span class="selector-tag">ProxyFactory</span><span class="selector-class">.getProxy</span>()<span class="selector-class">.submit</span>(<span class="string">"工资流水在此"</span>);</span><br><span class="line">    <span class="selector-tag">ProxyFactory</span><span class="selector-class">.getProxy</span>()<span class="selector-class">.defend</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">老板欠薪跑路，证据如下：工资流水在此</span><br><span class="line">铁证如山，马旭还钱</span><br></pre></td></tr></table></figure></p><p>可以看到，代理律师全权代理了王二狗的本次诉讼活动。那使用这种代理模式有什么好处呢，我们为什么不直接让王二狗直接完成本次诉讼呢？现实中的情况比较复杂，但是我可以简单列出几条：这样代理律师就可以在提起诉讼等操作之前做一些校验工作，或者记录工作。例如二狗提供的资料，律师可以选择的移交给法庭而不是全部等等操作，就是说可以对代理的对做一些控制。例如二狗不能出席法庭，代理律师可以代为出席。。。</p><h3 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h3><p>动态代理本质上仍然是代理，情况与上面介绍的完全一样，只是代理与被代理人的关系是动态确定的，例如王二狗的同事牛翠花开庭前没有确定她的代理律师，而是在开庭当天当庭选择了一个律师，映射到编程领域为这个关系是在运行时确定的。</p><p>那既然动态代理没有为我们增强代理方面的任何功能，那我们为什么还要用动态代理呢，静态代理不是挺好的吗？凡是动态确定的东西大概都具有灵活性，强扩展的优势。上面的例子中如果牛翠花也使用静态代理的话，那么就需要再添加两个类。一个是牛翠花诉讼类，一个是牛翠花的代理律师类，还的在代理静态工厂中添加一个方法。而如果使用动态代理的话，就只需要生成一个诉讼类就可以了，全程只需要一个代理律师类，因为我们可以动态的将很多人的案子交给这个律师来处理。</p><h3 id="Jdk动态代理实现"><a href="#Jdk动态代理实现" class="headerlink" title="Jdk动态代理实现"></a>Jdk动态代理实现</h3><p>在java的动态代理机制中，有两个重要的类或接口，一个是InvocationHandler接口、另一个则是 Proxy类，这个类和接口是实现我们动态代理所必须用到的。</p><p>InvocationHandler接口是给动态代理类实现的，负责处理被代理对象的操作的，而Proxy是用来创建动态代理类实例对象的，因为只有得到了这个对象我们才能调用那些需要代理的方法。</p><p>接下来我们看下实例，牛翠花动态指定代理律师是如何实现的。<br>1.构建一个牛翠花诉讼类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuiHuaNiu</span> <span class="keyword">implements</span> <span class="title">ILawSuit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(String proof)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"老板欠薪跑路，证据如下：%s"</span>,proof));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"铁证如山，%s还牛翠花血汗钱"</span>,<span class="string">"马旭"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.构建一个动态代理类<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynProxyLawyer</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object <span class="keyword">target</span>;<span class="comment">//被代理的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynProxyLawyer</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">target</span>=obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"案件进展："</span>+method.getName());</span><br><span class="line">        Object result=method.invoke(<span class="keyword">target</span>,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.修改静态工厂方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Object <span class="title">getDynProxy</span><span class="params">(Object <span class="keyword">target</span>)</span> </span>&#123;</span><br><span class="line">        InvocationHandler <span class="keyword">handler</span> = <span class="keyword">new</span> DynProxyLawyer(<span class="keyword">target</span>);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">target</span>.getClass().getClassLoader(), <span class="keyword">target</span>.getClass().getInterfaces(), <span class="keyword">handler</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.客户端使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ILawSuit proxy= (ILawSuit) ProxyFactory.getDynProxy(<span class="keyword">new</span> CuiHuaNiu());</span><br><span class="line">    proxy.submit(<span class="string">"工资流水在此"</span>);</span><br><span class="line">    proxy.defend();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果为：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">案件进展：<span class="keyword">submit</span></span><br><span class="line"><span class="keyword">老板欠薪跑路，证据如下：工资流水在此</span></span><br><span class="line"><span class="keyword">案件进展：defend</span></span><br><span class="line"><span class="keyword">铁证如山，马旭还牛翠花血汗钱</span></span><br></pre></td></tr></table></figure></p><h3 id="JDK动态代理实现的原理"><a href="#JDK动态代理实现的原理" class="headerlink" title="JDK动态代理实现的原理"></a>JDK动态代理实现的原理</h3><p>首先Jdk的动态代理实现方法是依赖于接口的，首先使用接口来定义好操作的规范。然后通过Proxy类产生的代理对象调用被代理对象的操作，而这个操作又被分发给InvocationHandler接口的 invoke方法具体执行<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object invoke(Object proxy, <span class="function"><span class="keyword">Method</span> <span class="title">method</span>, <span class="title">Object</span>[] <span class="title">args</span>) <span class="title">throws</span> <span class="title">Throwable</span>;</span></span><br></pre></td></tr></table></figure></p><p>此方法的参数含义如下<br><div class="note class_name: warning"><p><strong>proxy：</strong>代表动态代理对象</p><p><strong>method：</strong>代表正在执行的方法</p><p><strong>args：</strong>代表当前执行方法传入的实参</p><p><strong>返回值：</strong>表示当前执行方法的返回值</p></div><br>例如上面牛翠花案例中，我们使用Proxy类的<code>newProxyInstance()</code>方法生成的代理对象<code>proxy</code>去调用了<code>proxy.submit(&quot;工资流水在此&quot;);</code>操作，那么系统就会将此方法分发给<code>invoke()</code>.其中<code>proxy</code>对象的类是系统帮我们动态生产的，其实现了我们的业务接口<code>ILawSuit</code>。</p><h3 id="cgLib的动态代理实现"><a href="#cgLib的动态代理实现" class="headerlink" title="cgLib的动态代理实现"></a>cgLib的动态代理实现</h3><p>由于JDK只能针对实现了接口的类做动态代理，而不能对没有实现接口的类做动态代理，所以<code>cgLib</code>横空出世！CGLib（Code Generation Library）是一个强大、高性能的Code生成类库，它可以在程序运行期间动态扩展类或接口，它的底层是使用java字节码操作框架ASM实现。</p><p>1 引入cgLib 库<br>cglib-nodep-3.2.6.jar：使用nodep包不需要关联asm的jar包,jar包内部包含asm的类.</p><p>2 定义业务类，被代理的类没有实现任何接口<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Frank</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span>(<span class="params">String proof</span>)</span> &#123;</span><br><span class="line">       System.<span class="keyword">out</span>.println(String.format(<span class="string">"老板欠薪跑路，证据如下：%s"</span>,proof));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defend</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">       System.<span class="keyword">out</span>.println(String.format(<span class="string">"铁证如山，%s还Frank血汗钱"</span>,<span class="string">"马旭"</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3 定义拦截器，在调用目标方法时，CGLib会回调MethodInterceptor接口方法拦截，来实现你自己的代理逻辑，类似于JDK中的InvocationHandler接口。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">cgLibDynProxyLawyer</span> <span class="title">implements</span> <span class="title">MethodInterceptor</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span>(<span class="params">Object o, Method method, Object[] <span class="keyword">params</span>, MethodProxy methodProxy</span>) throws Throwable</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().<span class="keyword">equals</span>(<span class="string">"submit"</span>))</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"案件提交成功,证据如下："</span>+ Arrays.asList(<span class="keyword">params</span>));</span><br><span class="line">        Object result = methodProxy.invokeSuper(o, <span class="keyword">params</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4定义动态代理工厂，生成动态代理<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">Object</span> getGcLibDynProxy(<span class="built_in">Object</span> target)&#123;</span><br><span class="line">        Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> cgLibDynProxyLawyer());</span><br><span class="line">        <span class="built_in">Object</span> targetProxy= enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> targetProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5客户端调用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Frank cProxy= (Frank) ProxyFactory.getGcLibDynProxy(<span class="keyword">new</span> Frank());</span><br><span class="line">      cProxy.submit(<span class="string">"工资流水在此"</span>);</span><br><span class="line">      cProxy.defend();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">案件提交成功,证据如下：<span class="string">[工资流水在此]</span></span><br><span class="line">老板欠薪跑路，证据如下：工资流水在此</span><br><span class="line">铁证如山，马旭还Frank血汗钱</span><br></pre></td></tr></table></figure></p><p>可见，通过cgLib对没有实现任何接口的类做了动态代理，达到了和前面一样的效果。这里只是简单的讲解了一些cgLib的使用方式，有兴趣的可以进一步了解其比较高级的功能，例如回调过滤器（CallbackFilter）等。</p><h3 id="cgLib的动态代理原理"><a href="#cgLib的动态代理原理" class="headerlink" title="cgLib的动态代理原理"></a>cgLib的动态代理原理</h3><p>CGLIB原理：动态生成一个要代理类的子类，子类重写要代理的类的所有不是final的方法。在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。它比使用java反射的JDK动态代理要快。</p><p>CGLIB底层：使用字节码处理框架ASM，来转换字节码并生成新的类。不鼓励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。</p><p>CGLIB缺点：对于final方法，无法进行代理。<br>动态代理在AOP中的应用</p><p>什么是AOP? 维基百科上如是说：</p><pre><code>定义：In computing, aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns.AOP是一种编程范式，其目标是通过隔离切面耦合来增加程序的模块化。</code></pre><p>首先声明，AOP是OOP的补充，其地位及其重要性远不及OOP,总体来说OOP面向名词领域而AOP面向动词领域，例如对一个人的设计肯定是使用OOP，例如这个人有手，脚，眼睛瞪属性。而对这个人上厕所这个动作就会涉及到AOP，例如上厕所前的先确定一下拿没拿手纸等。要理解AOP就首先要理解什么是切面耦合（cross-cutting concerns）。例如有这样一个需求，要求为一个程序中所有方法名称以test开头的方法打印一句log，这个行为就是一个典型的cross-cutting场景。首先这个打印log和业务毫无关系，然后其处于分散在整个程序当中的各个模块，如果按照我们原始的方法开发，一旦后期需求变动将是及其繁琐的。所以我们就需要将这个切面耦合封装隔离，不要将其混入业务代码当中。</p><p>例如在王二狗的案子中，我们希望在案子起诉后打印一句成功的log，如果不使用代理的话，我们是需要将log写在相应的业务逻辑里面的，例如王二狗诉讼类SecondDogWang里面的submit（）方法中。使用了动态代理后，我们只需要在InvocationHandler 里面的invoke（）方法中写就可以了，不会侵入业务代码当中，在以后的维护过程中对业务毫无影响，这是我们希望看到的。<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Override</span></span><br><span class="line"><span class="keyword">public</span> Object invoke(Object proxy, <span class="function"><span class="keyword">Method</span> <span class="title">method</span>, <span class="title">Object</span>[] <span class="title">args</span>) <span class="title">throws</span> <span class="title">Throwable</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    if (method.getName().equals("submit"))</span></span></span><br><span class="line"><span class="function"><span class="comment">           System.out.println("案件提交成功,证据如下："+ Arrays.asList(args));</span></span></span><br><span class="line"><span class="function"><span class="comment">    Object result=method.invoke(target,args);</span></span></span><br><span class="line"><span class="function"><span class="comment">    return result;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br></pre></td></tr></table></figure></p><p>输出结果为：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">案件提交成功,证据如下：<span class="string">[工资流水在此]</span></span><br><span class="line">老板欠薪跑路，证据如下：工资流水在此</span><br><span class="line">铁证如山，马旭还牛翠花血汗钱</span><br></pre></td></tr></table></figure></p><p>所以AOP主要可以用于：日志记录，性能统计，安全控制，事务处理，异常处理等场景下。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>静态代理比动态代理更符合OOP原则，在日常开发中使用也较多。动态代理在开发框架时使用较多，例如大名鼎鼎的Spring。</p><p>最后希望王二狗和牛翠花他们可以顺利拿回自己的血汗钱。<br>文章为转载 主要方便自己以后看 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;转载地址https-blog-csdn-net-ShuSheng0007-article-details-80864854&quot;&gt;&lt;a href=&quot;#转载地址https-blog-csdn-net-ShuSheng0007-article-details-808648
      
    
    </summary>
    
      <category term="java" scheme="http://www.wliwu.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.wliwu.com/tags/java/"/>
    
      <category term="动态代理" scheme="http://www.wliwu.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>拒绝一切套路-SpringMVC自定义消息转换器掉坑学习</title>
    <link href="http://www.wliwu.com/2018/12/06/%E6%8B%92%E7%BB%9D%E4%B8%80%E5%88%87%E5%A5%97%E8%B7%AF-SpringMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8%E6%8E%89%E5%9D%91%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.wliwu.com/2018/12/06/拒绝一切套路-SpringMVC自定义消息转换器掉坑学习/</id>
    <published>2018-12-06T15:05:17.000Z</published>
    <updated>2018-12-11T02:27:54.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>@RequestBody</strong> 和 <strong>@ResponseBody</strong>这两个注解作用就是在前台向后台传递数据时,把请求报文中的数据通过springmvc的处理成一个我们自己定义的对象,在这个过程中首先springmvc会去请求头中找到一个contentType的属性,然后去匹配能够处理这种类型的消息转换器,而在返回数据时,再把对象转换成响应报文.<br><strong>contentType</strong>是requestHeader中的一个属性，这个头部主要用于说明body中的字符串是什么格式的，比如：text，json，xml,html等。springmvc解析请求时,首先通过此头部,才能确定使用什么格式来解析请求体中的字符串，对于响应报文，浏览器也是要通过这个属性,来确定在如何处理响应报文的返回数据。</p><p>第一步建立自己的消息转换器类继承AbstractHttpMessageConverter<t>。并定义我们的媒体类型x-user<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter&lt;User&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public <span class="type">MyMessageConverter</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> <span class="type">MediaType</span>(<span class="string">"application"</span>,<span class="string">"x-user"</span>, <span class="type">Charset</span>.forName(<span class="string">"utf-8"</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> boolean supports(<span class="type">Class</span>&lt;?&gt; clazz) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">User</span>.<span class="keyword">class</span>.isAssignableFrom(clazz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">User</span> readInternal(<span class="type">Class</span>&lt;? <span class="keyword">extends</span> <span class="type">User</span>&gt; clazz, <span class="type">HttpInputMessage</span> inputMessage)</span><br><span class="line"><span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">HttpMessageNotReadableException</span> &#123;</span><br><span class="line"> <span class="type">String</span> temp= <span class="type">StreamUtils</span>.copyToString(inputMessage.getBody(),<span class="type">Charset</span>.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line"> <span class="type">Map</span>&lt;<span class="type">String</span>,<span class="type">Object</span>&gt; map =(<span class="type">Map</span>&lt;<span class="type">String</span>,<span class="type">Object</span>&gt;)<span class="type">JSON</span>.parseObject(temp);</span><br><span class="line"> <span class="type">User</span> u = <span class="keyword">new</span> <span class="type">User</span>();</span><br><span class="line"> u.setFname((<span class="type">String</span>) map.get(<span class="string">"fname"</span>));</span><br><span class="line"> u.setLname((<span class="type">String</span>) map.get(<span class="string">"lname"</span>));</span><br><span class="line"> <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> void writeInternal(<span class="type">User</span> t, <span class="type">HttpOutputMessage</span> outputMessage)</span><br><span class="line"><span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">HttpMessageNotWritableException</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p><p>第二步在springMVC配置文件中配置我们的消息转换器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mvc:message-converters</span>  <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xiaojiling.tool.MyMessageConverter"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/x-user;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>第三步在Controller中手动指定那个接口可以接收我们定义的媒体类型。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/pushData"</span>, method = RequestMethod.POST, consumes=<span class="meta-string">"application/x-user"</span>)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String pushData(<span class="meta">@RequestBody</span> User user)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(user.getFname());</span><br><span class="line">       System.<span class="keyword">out</span>.println(user.getLname());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"sussess"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后前端在调用上门接口的时候ContentType需要改成我们定义的类型x-user。里我使用jmeter模拟请求数据。<br> <img src="/2018/12/06/拒绝一切套路-SpringMVC自定义消息转换器掉坑学习/1.png"><br>  <img src="/2018/12/06/拒绝一切套路-SpringMVC自定义消息转换器掉坑学习/2.png"><br>   <img src="/2018/12/06/拒绝一切套路-SpringMVC自定义消息转换器掉坑学习/3.png"></p><p>经过掉坑总结 Spring4.1.6版本死活都得不到想要的结果，自定义的消息转换器没办法生效。后来换成4.3.0版本一切正常。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SpringMVC提供了9种默认的消息转换器，这些转换器能满足大部分需求。</p><p><strong>ByteArrayHttpMessageConverter</strong>负责读取二进制格式的数据和写出二进制格式的数据；<br><strong>StringHttpMessageConverter</strong>负责读取字符串格式的数据和写出二进制格式的数据；<br><strong>ResourceHttpMessageConverter</strong>负责读取资源文件和写出资源文件数据；<br><strong>FormHttpMessageConverter</strong>负责读取form提交的数据（能读取的数据格式为 application/x-www-form-urlencoded，不能读取multipart/form-data格式数据）；负责写入application/x-www-from-urlencoded和multipart/form-data格式的数据；<br><strong>MappingJacksonHttpMessageConverter</strong>负责读取和写入json格式的数据；<br><strong>SouceHttpMessageConverter</strong>负责读取和写入 xml 中javax.xml.transform.Source定义的数据；<br><strong>Jaxb2RootElementHttpMessageConverter</strong>负责读取和写入xml 标签格式的数据；<br><strong>AtomFeedHttpMessageConverter</strong>负责读取和写入Atom格式的数据；<br><strong>RssChannelHttpMessageConverter</strong>负责读取和写入RSS格式的数据；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;@RequestBody&lt;/strong&gt; 和 &lt;strong&gt;@ResponseBody&lt;/strong&gt;这两个注解作用就
      
    
    </summary>
    
      <category term="java-SpringMVC" scheme="http://www.wliwu.com/categories/java-SpringMVC/"/>
    
    
      <category term="java" scheme="http://www.wliwu.com/tags/java/"/>
    
      <category term="SpringMVC" scheme="http://www.wliwu.com/tags/SpringMVC/"/>
    
      <category term="Spring消息转换器" scheme="http://www.wliwu.com/tags/Spring%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>拒绝一切套路-浅谈@RequestBody注解使用</title>
    <link href="http://www.wliwu.com/2018/12/04/%E6%8B%92%E7%BB%9D%E4%B8%80%E5%88%87%E5%A5%97%E8%B7%AF-%E6%B5%85%E8%B0%88-RequestBody%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.wliwu.com/2018/12/04/拒绝一切套路-浅谈-RequestBody注解使用/</id>
    <published>2018-12-04T13:02:49.000Z</published>
    <updated>2018-12-04T15:19:35.598Z</updated>
    
    <content type="html"><![CDATA[<p>利用@RequestBody注解User对象接收前台json数据。<br>Controller中代码如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RequestMapping</span>(value=<span class="string">"/hhoo"</span>)</span><br><span class="line">public void getHello1(<span class="variable">@RequestBody</span> User user)&#123;</span><br><span class="line"><span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(user.getFname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类User代码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String fname;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFname</span><span class="params">(String fname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fname = fname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>jsp页面代码如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"sin"</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"ppp()"</span>  <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意from表单数据如果不经处理是无法被@RequestBody注解对象User所接收，所以这里需要引入<strong>jquery.serializejson.js</strong><br>来将from表单数据转换为json字符串。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;%=basePath%&gt;js/jquery.serializejson.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>转换代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data1=<span class="built_in">JSON</span>.stringify($(<span class="string">'#sin'</span>).serializeJSON())</span><br></pre></td></tr></table></figure></p><p>js部分代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">ppp</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> data1=<span class="built_in">JSON</span>.stringify($(<span class="string">'#sin'</span>).serializeJSON());</span></span><br><span class="line"><span class="javascript">$.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">type:<span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">url: <span class="string">"hhoo"</span>,</span></span><br><span class="line"><span class="actionscript">dataType:<span class="string">"json"</span>, </span></span><br><span class="line"><span class="actionscript">contentType:<span class="string">"application/json;charset=UTF-8"</span>,</span></span><br><span class="line"><span class="undefined">data:data1,</span></span><br><span class="line"><span class="actionscript">success: <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="undefined">alert(data);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时在页面上提交请求（此时提交的json字符串为    {“fname”:”Wei”} ）<br><img src="/2018/12/04/拒绝一切套路-浅谈-RequestBody注解使用/1.png"><br>控制台打印如下<br><img src="/2018/12/04/拒绝一切套路-浅谈-RequestBody注解使用/2.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>@RequestBody注解通常用来处理contentType类型为application/json, application/xml这类的数据。<br><strong>注意</strong> 此注解接收的是json字符串，而不是json对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用@RequestBody注解User对象接收前台json数据。&lt;br&gt;Controller中代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="java-SpringMVC" scheme="http://www.wliwu.com/categories/java-SpringMVC/"/>
    
    
      <category term="java" scheme="http://www.wliwu.com/tags/java/"/>
    
      <category term="SpringMVC" scheme="http://www.wliwu.com/tags/SpringMVC/"/>
    
      <category term="RequestBody" scheme="http://www.wliwu.com/tags/RequestBody/"/>
    
  </entry>
  
  <entry>
    <title>拒绝一切套路SpringMVC入门教程总结</title>
    <link href="http://www.wliwu.com/2018/11/30/%E6%8B%92%E7%BB%9D%E4%B8%80%E5%88%87%E5%A5%97%E8%B7%AFSpringMVC%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://www.wliwu.com/2018/11/30/拒绝一切套路SpringMVC入门教程总结/</id>
    <published>2018-11-30T03:59:33.000Z</published>
    <updated>2018-12-04T12:59:28.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="搭建SpringMVC环境"><a href="#搭建SpringMVC环境" class="headerlink" title="搭建SpringMVC环境"></a>搭建SpringMVC环境</h3><h4 id="导入SpringMVC基础包"><a href="#导入SpringMVC基础包" class="headerlink" title="导入SpringMVC基础包"></a>导入SpringMVC基础包</h4><p><img src="/2018/11/30/拒绝一切套路SpringMVC入门教程总结/drjar.png"></p><h4 id="创建SpringMVC配置文件-spring-mvc-xml"><a href="#创建SpringMVC配置文件-spring-mvc-xml" class="headerlink" title="创建SpringMVC配置文件 spring-mvc.xml"></a>创建SpringMVC配置文件 spring-mvc.xml</h4><p>在src目录下创建spring-mvc.xml配置文件,配置自动扫描Controller路径,加入InternalResourceViewResolver视图名称解析器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"</span>&gt;</span>                    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描Controller --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xiaojiling.web"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/View/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="在web-xml中添加SpringMVC的配置"><a href="#在web-xml中添加SpringMVC的配置" class="headerlink" title="在web.xml中添加SpringMVC的配置"></a>在web.xml中添加SpringMVC的配置</h4><p>在web.xml中加入Dispatcherservlet前端控制器来拦截匹配的请求<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="建立Controller和jsp文件"><a href="#建立Controller和jsp文件" class="headerlink" title="建立Controller和jsp文件"></a>建立Controller和jsp文件</h4><p>新建路径com/xiaojiling/web 在路径下创建TestCon.java控制器类<br><img src="/2018/11/30/拒绝一切套路SpringMVC入门教程总结/ncon.png"><br>并编写其中代码<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/Test"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCon</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/getHello"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String getHello()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在WEB_INF下新建目录View在目录中新建Hello.jsp,并在body当中加入内容”你好”。</p><h4 id="启动tomcat访问项目"><a href="#启动tomcat访问项目" class="headerlink" title="启动tomcat访问项目"></a>启动tomcat访问项目</h4><p>启动tomcat并在本地访问你的项目 </p><ul><li>http ://localhost:8080/项目/Test/getHello<br><img src="/2018/11/30/拒绝一切套路SpringMVC入门教程总结/locust.png"></li></ul><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p><strong>@Controller</strong><br><strong>@RequestMapping</strong><br><strong>@RequestParam</strong><br><strong>@RequestBody</strong><br><strong>@ResponseBody</strong><br><strong>@ModelAttribute</strong><br><strong>@PathVariable</strong><br><strong>@ExceptionHandler</strong><br><strong>@ControllerAdvice</strong></p><h4 id="常用用法"><a href="#常用用法" class="headerlink" title="常用用法"></a>常用用法</h4><p>示例<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/&#123;showIds&#125;/iii"</span>,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String getHello(<span class="meta">@PathVariable</span> String showIds)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"将URL中占位符的值绑定到showIds上"</span>+showIds);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="注解解释"><a href="#注解解释" class="headerlink" title="注解解释"></a>注解解释</h4><p><strong>@Controller</strong> 负责注册一个bean到spring上下文当中。<br><strong>@RequestMapping</strong>用于处理请求地址映射，可注解在类上或方法上，注解在类上表示类中所有响应请求的方法都是以该注解地址作为父路径。<br><strong>@RequestParam</strong>注解在参数上将指定的请求参数赋值给方法中的形参。如果不带注解同样可以赋值进去，可以通过@RequestParam(“id”)方式指定获取的参数。<br><strong>@RequestBody</strong>注解接收json格式的字符串。<br><strong>@ResponseBody</strong>注解可将方法的返回值以特定格式写入到response的body区域，进而将数据返回给客户端。当方法上面没有写ResponseBody,底层会将方法的返回值封装为ModelAndView对象。<br><strong>@ModelAttribute</strong><br>在方法上使用此注解，会在Controller每个方法执行之前都执行此方法。<br>在方法参数上使用此注解,可以从隐含对象中获取此参数的数据。<br><strong>@PathVariable</strong>绑定URL当中占位符的值到参数当中。<br><strong>@ExceptionHandler</strong>注解到方法上，Controller中其他方法出现异常后会执行该方法。<br><strong>@ControllerAdvice</strong>注解在类上，使这个类成为全局Controller的异常处理类。</p><h4 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h4><p>在Controller中方法上加入此注解会在执行Controller之前执行此方法。下面方法中会隐含的将user对象存放于Model中<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@ModelAttribute</span></span><br><span class="line">public User helloModelA(<span class="variable">@RequestParam</span>(required = false) String name)｛</span><br><span class="line">    User user = new User(name);</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">user</span>;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></p><h4 id="InitBinder处理Data类型参数"><a href="#InitBinder处理Data类型参数" class="headerlink" title="@InitBinder处理Data类型参数"></a>@InitBinder处理Data类型参数</h4><p>页面传递的某些数据是Date、Integer、Double等类型的时候，如果这些数据不做处理的话将无法绑定到参数上。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@InitBinder  </span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> initBinder(WebDataBinder binder) &#123;  </span><br><span class="line">    SimpleDateFormat dateFormat = <span class="literal">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);  </span><br><span class="line">    dateFormat.setLenient(<span class="literal">false</span>);  </span><br><span class="line">    binder.registerCustomEditor(<span class="built_in">Date</span>.class, <span class="literal">new</span> CustomDateEditor(dateFormat, <span class="literal">true</span>));  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/showData"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> showData(<span class="built_in">Date</span> <span class="built_in">date</span>)&#123;</span><br><span class="line">        System.out.println(<span class="built_in">date</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="ResponseBody注解返回json格式字符串"><a href="#ResponseBody注解返回json格式字符串" class="headerlink" title="@ResponseBody注解返回json格式字符串"></a>@ResponseBody注解返回json格式字符串</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = <span class="string">"getUser"</span>)</span><br><span class="line">@ResponseBody</span><br><span class="line">publicy <span class="keyword">User</span> getUser()&#123;</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = new <span class="keyword">User</span>()</span><br><span class="line">            <span class="keyword">user</span>.setId(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">user</span>.setName(<span class="string">"Wei"</span>);</span><br><span class="line">return <span class="keyword">user</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 <strong>@ResponseBody</strong>注解后，此时我们不用做任何处理user对象会转换为json格式字符串。</p><h4 id="ExceptionHandler和-ControllerAdvice处理Controller异常"><a href="#ExceptionHandler和-ControllerAdvice处理Controller异常" class="headerlink" title="@ExceptionHandler和@ControllerAdvice处理Controller异常"></a>@ExceptionHandler和@ControllerAdvice处理Controller异常</h4><p> 在View下定义error.jsp作为异常返回页面。在访问getError后会产生异常<br> <strong>java.lang.ArrayIndexOutOfBoundsException</strong>此时注解 <strong>@ExceptionHandler</strong>发挥作用返回异常页面，并且产生的异常一块儿返回过去。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@ExceptionHandler</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function">ModelAndView <span class="title">exceptionHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">       ModelAndView modelandview = <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</span><br><span class="line">       modelandview.addObject(<span class="string">"errMsg"</span>, e);</span><br><span class="line">       <span class="keyword">return</span> modelandview;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getError"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">getError</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <strong>@ControllerAdvice</strong> 定义全局异常处理类<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetErrorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        ModelAndView modelandview = <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</span><br><span class="line">        modelandview.addObject(<span class="string">"errMsg"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> modelandview;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <strong>注意</strong>：当代码当中有需要我们手动捕获的异常时候 @ExceptionHandler的结果似乎就变得不太明了。<br> 如下代码<br> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(<span class="string">"/getError"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getError</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">String s = <span class="string">"kk"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Date ss = <span class="keyword">new</span> SimpleDateFormat().parse(s);</span><br><span class="line">System.<span class="keyword">out</span>.println(ss);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"进入此异常块儿"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   @ExceptionHandler</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">exceptionHandler</span>(<span class="params">Exception e</span>)</span>&#123;</span><br><span class="line">       ModelAndView modelandview = <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</span><br><span class="line">       System.<span class="keyword">out</span>.println(<span class="string">"这是异常信息"</span>+e);</span><br><span class="line">       modelandview.addObject(<span class="string">"errMsg"</span>, e);</span><br><span class="line">       <span class="keyword">return</span> modelandview;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p> 代码<strong>new SimpleDateFormat().parse(s)</strong> 需要我们手动捕获异常，如果在这里加入try catch语句，上面代码在异常之后会被catch语句捕获，而不会进入@ExceptionHandle注解的方法。</p><p>如果在异常方法上加入<strong>throws Exception</strong>抛出异常，则会进入@ExceptionHandle注解的方法。<br>当然在实际当中这类代码我们不会写在Controller里。</p><p> 另一种处理全局异常的方法,在SpringMVC配置文件中加入配置<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   &lt;bean <span class="built_in">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"defaultErrorView"</span> value=<span class="string">"/error"</span> /&gt;</span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"exceptionAttribute"</span> value=<span class="string">"ex"</span>&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="配置一个自己的拦截器"><a href="#配置一个自己的拦截器" class="headerlink" title="配置一个自己的拦截器"></a>配置一个自己的拦截器</h4><p>新建类MyInterceptor,并实现HandlerInterceptor接口<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MyInterceptor</span> <span class="selector-tag">implements</span> <span class="selector-tag">HandlerInterceptor</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span><br><span class="line">throws Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span><br><span class="line">throws Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception &#123;</span><br><span class="line"><span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">"preHandle"</span>);</span><br><span class="line"><span class="selector-tag">return</span> <span class="selector-tag">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在SpringMVC配置文件中添加配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/Test/**"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xiaojiling.web.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>        </span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>HandlerInterceptor</strong>接口定义了三个方法 preHandle、postHandle、afterCompletion。</p><p><strong>preHandle</strong>当它返回为false 时，表示请求结束，后续的Interceptor 和Controller 都不会再执行；当返回值为true 时就会继续调用下一个Interceptor 的preHandle 方法，如果已经是最后一个Interceptor 的时候就会是调用当前请求的Controller 方法。<br><strong>postHandle</strong>调用Controller之后，进行渲染页面之前被调用。<br><strong>afterCompletion</strong>调用完Controller接口，渲染页面之后调用。返回true的拦截器都会调用该拦截器的afterCompletion方法，这个方法的主要作用是用于进行资源清理工作的。</p><h3 id="Spring整合SpringMVC"><a href="#Spring整合SpringMVC" class="headerlink" title="Spring整合SpringMVC"></a>Spring整合SpringMVC</h3><p>在src下添加Spring配置文件spring-context.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util/spring-util-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        "</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>    </span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xiaojiling.service"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在web.xml中添加spring的配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在SpringMVC配置文件中加入一些配置,防止spring和springmvc对同一个对象进行管理<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;/mvc:interceptors&gt;</span><br><span class="line">    &lt;<span class="keyword">context</span>:component-scan base-<span class="keyword">package</span>=<span class="string">"com.xiaojiling.web"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">context</span>:<span class="keyword">include</span>-filter <span class="keyword">type</span>=<span class="string">"annotation"</span> </span><br><span class="line">        expression=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">context</span>:<span class="keyword">include</span>-filter <span class="keyword">type</span>=<span class="string">"annotation"</span> </span><br><span class="line">        expression=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">context</span>:component-scan&gt;</span><br></pre></td></tr></table></figure></p><p>添加实体类User<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加UserService类<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserService</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"get User"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加UserController类<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/user"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/get"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="keyword">get</span>()&#123;</span><br><span class="line">        userService.<span class="keyword">get</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>项目如下<br><img src="/2018/11/30/拒绝一切套路SpringMVC入门教程总结/003.png"><br>在浏览器上访问<br><img src="/2018/11/30/拒绝一切套路SpringMVC入门教程总结/001.png"><br>控制台打印结果<br><img src="/2018/11/30/拒绝一切套路SpringMVC入门教程总结/002.png"></p><h3 id="SpringMVC运行流程图"><a href="#SpringMVC运行流程图" class="headerlink" title="SpringMVC运行流程图"></a>SpringMVC运行流程图</h3><p>在别人博客上找到的一张流程图<br><img src="/2018/11/30/拒绝一切套路SpringMVC入门教程总结/005.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;h3 id=&quot;搭建SpringMVC环境&quot;&gt;&lt;a href=&quot;#搭建SpringMVC环境&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="java-SpringMVC" scheme="http://www.wliwu.com/categories/java-SpringMVC/"/>
    
    
      <category term="java" scheme="http://www.wliwu.com/tags/java/"/>
    
      <category term="SpringMVC" scheme="http://www.wliwu.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Iterator解决List删除元素漏删情况</title>
    <link href="http://www.wliwu.com/2018/11/26/%E6%9A%82%E6%97%B6%E5%B0%B1%E5%8F%AB%E8%BF%99%E4%B8%AA%E5%90%8D%E5%AD%97/"/>
    <id>http://www.wliwu.com/2018/11/26/暂时就叫这个名字/</id>
    <published>2018-11-26T08:44:07.000Z</published>
    <updated>2018-11-26T13:25:35.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人在从事java初期，在需要删除List当中元素的时候都是用for循环遍历集合来删除当中的元素，后来经人指点得知这种删除指定元素的方式似乎不太安全。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>看如下删除元素示例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; ls = new ArrayList&lt;String&gt;();</span><br><span class="line">ls.<span class="builtin-name">add</span>(<span class="string">"aa"</span>);</span><br><span class="line">ls.<span class="builtin-name">add</span>(<span class="string">"bb"</span>);</span><br><span class="line">ls.<span class="builtin-name">add</span>(<span class="string">"cc"</span>);</span><br><span class="line">ls.<span class="builtin-name">add</span>(<span class="string">"aa"</span>);</span><br><span class="line">ls.<span class="builtin-name">add</span>(<span class="string">"aa"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"这是删除之前的ls"</span>+<span class="keyword">ls</span>);<span class="comment">//删除之前的ls</span></span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;<span class="keyword">ls</span>.size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"aa"</span>==<span class="keyword">ls</span>.<span class="built_in">get</span>(i))&#123;</span><br><span class="line"><span class="keyword">ls</span>.remove(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"这是删除之前的ls"</span>+<span class="keyword">ls</span>);<span class="comment">//删除之后的ls</span></span><br></pre></td></tr></table></figure><p>控制台输出如下<br><img src="/2018/11/26/暂时就叫这个名字/1.png"></p><p>这似乎不是我们想要的结果。导致上面的原因是在ls删除某个元素之后，ls的大小随之发生变化，而你的索引也在变化，删除元素之后的元素都往前移动了一位，这就导致了漏删掉一些元素。</p><h3 id="用Iterator解决问题"><a href="#用Iterator解决问题" class="headerlink" title="用Iterator解决问题"></a>用Iterator解决问题</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">System.out.println</span>(<span class="string">"这是删除之前的ls"</span>+ls)<span class="comment">;</span></span><br><span class="line"><span class="keyword">Iterator&lt;String&gt; </span><span class="keyword">iterator </span>= ls.<span class="keyword">iterator();</span></span><br><span class="line"><span class="keyword">while(iterator.hasNext())&#123;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">String </span><span class="keyword">str </span>= <span class="keyword">iterator.next();</span></span><br><span class="line"><span class="keyword"></span><span class="meta">if</span>(<span class="string">"aa"</span>.equals(<span class="keyword">str))&#123;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">iterator.remove();</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">System.out.println</span>(<span class="string">"这是删除之后的ls"</span>+ls)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>控制台输出如下<br><img src="/2018/11/26/暂时就叫这个名字/2.png"></p><p>这正是我们想要的结果</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Iterator&lt;String&gt; </span><span class="keyword">iterator </span>= ls.<span class="keyword">iterator();</span></span><br></pre></td></tr></table></figure><p>上面代码将ls的引用传递给iterator对象，由iterator对象来做删除操作，让这个操作变得安全。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实第一眼看到iterator来删除对象时候是比较疑惑的，因为在iterator遍历完之后并没有将值赋给List，其实Iterator<string> iterator = ls.iterator() 这句是将List的引用传递给Iterator对象所以并不存在赋值过去的说法。</string></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本人在从事java初期，在需要删除List当中元素的时候都是用for循环遍历集合来删除当中的元素，后来经人指点得知这种删除指定元素的方式似乎
      
    
    </summary>
    
      <category term="java" scheme="http://www.wliwu.com/categories/java/"/>
    
    
      <category term="iterator" scheme="http://www.wliwu.com/tags/iterator/"/>
    
      <category term="java" scheme="http://www.wliwu.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hexo + github/coding搭建个人博客踩坑流程</title>
    <link href="http://www.wliwu.com/2018/11/14/hexo-github-coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E6%95%99%E7%A8%8B/"/>
    <id>http://www.wliwu.com/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/</id>
    <published>2018-11-14T07:08:07.000Z</published>
    <updated>2018-11-26T10:16:47.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   用 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> 搭建个人博客网上技术帖众多但是难看到比较系统全面的技术贴，这篇帖子主要针对不熟悉hex且对此有兴趣的用户，我认为重要步骤我会详细截图。</p><h2 id="了解hexo"><a href="#了解hexo" class="headerlink" title="了解hexo"></a>了解hexo</h2><p>   hexo真不用多吹了（全静态，支持Markdown，操作方便，超快速度，支持众多插件）</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="下载安装node-js-git"><a href="#下载安装node-js-git" class="headerlink" title="下载安装node.js/git"></a>下载安装node.js/git</h3><p>1、下载安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> 安装完成后控制台敲 node -v,npm -v提示如下表示安装成功<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/node-cmd.png" alt="test"></p><p>2、下载安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a> 设置git系统环境变量方便cmd控制台里使用git命令(在环境变量-系统变量-path 添加git安装目录下bin文件夹路径)</p><p>控制台运行git –version 提示如下表示安装成功<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/git-cmd.png"></p><h3 id="申请github-coding账号"><a href="#申请github-coding账号" class="headerlink" title="申请github/coding账号"></a>申请github/coding账号</h3><h4 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h4><p>注册github账户并新建仓库 (过程不懂的自行百度文章很多这里不多赘述)<br>仓库名请务必以.github.io结尾，方便使用github pages<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/cre-git.png"></p><p>进入仓库 在右侧选择 Settings 然后往下拖 看到 GitHub Pages 设置 Source 选择 master branch 然后 save 就可以看到属于你的github域名了<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/git-pages.png"></p><h4 id="注册coding"><a href="#注册coding" class="headerlink" title="注册coding"></a>注册coding</h4><p>注册coding账户并新建仓库 (可直接用腾讯社交账号登陆)<br>创建项目 选择启用README.md文件初始化项目<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/cre-cod.png"><br>创建项目之后进入项目在左侧选择代码-Pages服务-一键开启coding pages 就可以看到属于你的coding域名了<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/cod-page.png"></p><h3 id="安装配置hexo"><a href="#安装配置hexo" class="headerlink" title="安装配置hexo"></a>安装配置hexo</h3><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>在合适的位置创建hexo安装文件夹。然后通过命令行在此文件夹内运行命令 npm install hexo -g 安装hexo<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/ins-hex.png"><br>如果安装失败请尝试以管理员身份运行CMD窗口<br>输入hexo -v 查看是否安装成功</p><h4 id="初始化目录"><a href="#初始化目录" class="headerlink" title="初始化目录"></a>初始化目录</h4><p>输入 hexo init 初始化该文件夹<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/hex-init.png"></p><h4 id="安装组件"><a href="#安装组件" class="headerlink" title="安装组件"></a>安装组件</h4><p>输入 npm install 安装组件<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/npm-ins.png"></p><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><p>输入 hexo g 生成静态文件<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/hex-g.png"></p><h4 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h4><p>输入hexo s启动服务<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/hex-s.png"><br>打开浏览器访问 localhost:4000 造访你的博客主页<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/hex-4000.png"></p><h3 id="部署到github-coding"><a href="#部署到github-coding" class="headerlink" title="部署到github/coding"></a>部署到github/coding</h3><h4 id="配置本地SSH公钥"><a href="#配置本地SSH公钥" class="headerlink" title="配置本地SSH公钥"></a>配置本地SSH公钥</h4><p>控制台输入 ssh-keygen -t rsa -C “你的邮箱” ，连续敲三下回车 成功之后会在红框路径内生成 id_rsa.pub 公钥文件<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/ssh-key.png"></p><h4 id="coding-github配置SSH公钥"><a href="#coding-github配置SSH公钥" class="headerlink" title="coding/github配置SSH公钥"></a>coding/github配置SSH公钥</h4><p>复制 id_rsa.pub 文件内所有内容 (注意不要有空格否则之后可能报错) 打开coding项目项目主页在左侧选择-设置-部署公钥-新建部署公钥 再公钥内容当中粘贴复制的本地公钥 (注意要勾选授予推送权限否则推送代码时候会报错)<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/cod-ssh.png"></p><p>github添加公钥同样是复制 id_rsa.pub 文件内容 在github主页上点击右上方头像-Settings-SSH and GPG keys-New SSH key粘贴进去新建就可以了</p><h4 id="配置deploy"><a href="#配置deploy" class="headerlink" title="配置deploy"></a>配置deploy</h4><p>打开hexo博客主配置文件_cpmfog.yml，搜索找到 deploy属性配置如下<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>:</span><br><span class="line">  <span class="attribute">repository</span>:</span><br><span class="line">      <span class="attribute">github</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:compassblog/compassblog.github.io.git,master</span><br><span class="line">      <span class="attribute">coding</span>: git<span class="variable">@git</span>.coding.<span class="attribute">net</span>:compassblog/compassblog.git,master</span><br></pre></td></tr></table></figure></p><p>参数当中github后面的地址在github项目主页当中点击Clone or download按钮复制当中的参数<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/git-p.png"></p><p>coding后面的地址在coding项目主页当中点击左侧代码-代码浏览-SSH 复制当中的参数</p><p><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/cod-p.png"></p><h4 id="hexo-d-部署到github-coding"><a href="#hexo-d-部署到github-coding" class="headerlink" title="hexo d 部署到github/coding"></a>hexo d 部署到github/coding</h4><p>打开控制台移动到hexo博客根目录输入 hexo d 部署到github 和 coding上<br><img src="/2018/11/14/hexo-github-coding搭建个人博客踩坑教程/hexo-d.png"></p><p>最后打开浏览器输入在github 和 coding 上申请的域名访问博客 (注意初次部署上去可能会不显示主题样式，多网上找解决办法有利于了解hexo)</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>如果是初次接触的话照着文档来肯定会遇到一些问题。注意控制台的报错信息复制到百度几乎都能找到答案。以后抽空再写hexo主题的东西吧，太晚了睡觉了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;   用 &lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;h
      
    
    </summary>
    
      <category term="hexo-next" scheme="http://www.wliwu.com/categories/hexo-next/"/>
    
    
      <category term="hexo" scheme="http://www.wliwu.com/tags/hexo/"/>
    
      <category term="next" scheme="http://www.wliwu.com/tags/next/"/>
    
      <category term="github" scheme="http://www.wliwu.com/tags/github/"/>
    
      <category term="coding" scheme="http://www.wliwu.com/tags/coding/"/>
    
  </entry>
  
</feed>
